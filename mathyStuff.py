import numpy as np
import matplotlib.pyplot as plt
from shapely.geometry import LineString
import pandas as pd

def section_y(y_coord,sectionNo):
    for n in range(sectionNo):
        if n == 0:
            if y_coord >= 0 and y_coord <= (720/sectionNo)*(n+1):
                return 1
        else:
            if y_coord > (720/sectionNo)*n and y_coord <= (720/sectionNo)*(n+1):
                return n+1

#WIN_20250730_23_12_07_Pro
#positionsRaw = [-0.5325853824615479, -0.5301042199134827, -0.5247068405151367, -0.5205500721931458, -0.5244581699371338, -0.40609338879585266, -0.5285013914108276, -0.3726186454296112, -0.5205764770507812, -0.26383814215660095, -0.27307769656181335, -0.2659529745578766, -0.487113356590271, -0.4983258545398712, -0.5466229319572449, -0.5200075507164001, -0.5250523090362549, -0.28351128101348877, -0.1844327300786972, -0.21245239675045013, -0.3286295533180237, -0.4397791624069214, -0.4914955496788025, -0.5162328481674194, -0.5215202569961548, -0.5135793685913086, -0.523714005947113, -0.5248959064483643, -0.5273776054382324, -0.5142015814781189, -0.5054910778999329]

positionsRaw = [-0.5487394332885742, -0.5456001162528992, -0.5480575561523438, -0.5685305595397949, -0.5454643964767456, -0.5481901168823242, -0.5483039617538452, -0.5104462504386902, -0.5337873697280884, -0.5196753740310669, -0.5073473453521729, -0.5130718350410461, -0.5025277137756348, -0.5184731483459473, -0.48305463790893555, -0.5189809203147888, -0.5242972373962402, -0.5273551344871521, -0.46455875039100647, -0.44850823283195496, -0.4868045747280121, -0.5032780170440674, -0.5108714699745178, -0.4288733899593353, -0.4919275939464569, -0.45334142446517944, -0.46164244413375854, -0.43710169196128845, -0.5200451016426086, -0.5001036524772644, -0.4986776113510132, -0.3812040686607361, -0.46808484196662903, -0.5081568360328674, -0.4558117389678955, -0.5544812679290771, -0.5446252822875977, -0.37596291303634644, -0.2875831723213196, -0.4391776919364929, -0.3801746666431427, -0.4622561037540436, -0.41480517387390137, -0.39815378189086914, -0.4299168884754181, -0.41444939374923706, -0.40169447660446167, -0.4267593324184418, -0.4108484387397766, -0.3431186378002167, -0.4120084047317505, -0.41699278354644775, -0.3599002957344055, -0.402701199054718, -0.4104255735874176, -0.4102693200111389, -0.42681777477264404, -0.4409027099609375, -0.4562623202800751, -0.4425475597381592, -0.4442615211009979, -0.44183802604675293, -0.3677114248275757, -0.38218358159065247, -0.3722921907901764, -0.3796590566635132, -0.3823210895061493, -0.34804943203926086, -0.5057900547981262, -0.6008517742156982, -0.5588468909263611, -0.551742434501648, -0.5509993433952332, -0.5340068340301514, -0.48054322600364685, -0.5505767464637756, -0.46372872591018677, -0.3699273467063904, -0.39193302392959595, -0.38868391513824463, -0.3671024739742279, -0.3816691040992737, -0.3432287573814392, -0.4224630892276764, -0.5449060797691345, -0.4312500059604645, -0.4265431761741638, -0.5283615589141846, -0.42606276273727417, -0.403642475605011, -0.43859413266181946, -0.4200725555419922, -0.3889784812927246, -0.46474534273147583, -0.5431596040725708, -0.5545910596847534, -0.5493809580802917, -0.532088041305542, -0.5135778188705444, -0.5098484754562378, -0.5132182836532593, -0.5461300611495972, -0.5478014349937439, -0.5533897280693054, -0.5589211583137512, -0.5558322668075562, -0.5564947724342346, -0.5594906210899353, -0.5581611394882202, -0.5596962571144104, -0.5576977133750916, -0.5454510450363159, -0.5712703466415405, -0.38966619968414307, -0.5144249796867371, -0.5096797347068787, -0.4418351948261261, -0.5013300776481628, -0.45732930302619934, -0.5311780571937561, -0.4124690592288971, -0.4448331296443939, -0.4123997092247009, -0.496725857257843, -0.4323216676712036, -0.4714202582836151, -0.37223386764526367, -0.4784618318080902, -0.45170271396636963, -0.5216473340988159, -0.5625842213630676, -0.5152930617332458, -0.5665940642356873, -0.505734920501709, -0.5242438912391663, -0.39060288667678833, -0.40662696957588196, -0.47505712509155273, -0.4843079745769501, -0.5363353490829468, -0.4594810903072357, -0.4221419394016266, -0.45898640155792236, -0.5079809427261353, -0.4770529568195343, -0.5620664954185486, -0.556859016418457, -0.4858088493347168, -0.3788103461265564, -0.4251663088798523, -0.3760714530944824, -0.3643641173839569, -0.4139161705970764, -0.3706666827201843, -0.4921014904975891, -0.37521129846572876, -0.46824246644973755, -0.45536404848098755, -0.5563980340957642, -0.5444576740264893, -0.5600857138633728, -0.5518373847007751, -0.5496876835823059, -0.5061298608779907, -0.5275072455406189, -0.5087194442749023, -0.5138834714889526, -0.5235146284103394, -0.5304703712463379, -0.5325214862823486, -0.5346775650978088, -0.525321364402771, -0.529176652431488, -0.5124203562736511, -0.5110419988632202, -0.5031708478927612, -0.5118680000305176, -0.49583134055137634, -0.511654794216156, -0.4957394003868103, -0.4929341673851013, -0.5064615607261658, -0.505266547203064, -0.5550753474235535, -0.5451611280441284, -0.5487560033798218, -0.5470869541168213, -0.547314465045929, -0.5453840494155884, -0.5429956912994385, -0.5477694272994995, -0.551960289478302, -0.5512006878852844, -0.5562561750411987, -0.5467765927314758, -0.5428956151008606, -0.5462566614151001, -0.5489434003829956, -0.5561537146568298, -0.5512233972549438, -0.5439226031303406, -0.5464651584625244, -0.5450199842453003, -0.5211634635925293, -0.5620511174201965, -0.547993004322052]

#WIN_20250807_19_07_53_Pro
#positionsRaw = [-0.6194545030593872, -0.6261144876480103, -0.6144956946372986, -0.6064348816871643, -0.5975335240364075, -0.6059531569480896, -0.6114587783813477, -0.6107118725776672, -0.6071372628211975, -0.6085165739059448, -0.6094580292701721, -0.6111363172531128, -0.6143379807472229, -0.6106725335121155, -0.6004202961921692, -0.5972669124603271, -0.6039623618125916, -0.6017809510231018, -0.6057973504066467, -0.6050704717636108, -0.6037896275520325, -0.5991820096969604, -0.6046565771102905, -0.6007012724876404, -0.6050994992256165, -0.6041679978370667, -0.6034728288650513, -0.6039924025535583, -0.6025302410125732, -0.6009629964828491, -0.596050500869751, -0.598336935043335, -0.5958999395370483, -0.6004021167755127, -0.6030275821685791, -0.6033242344856262, -0.5992010235786438, -0.6027380228042603, -0.6042390465736389, -0.5996551513671875, -0.6001970767974854, -0.6016270518302917, -0.6062532067298889, -0.6110777258872986, -0.6191348433494568]

#WIN_20250730_13_18_25_Pro
#positionsRaw = [-0.5769371390342712, -0.5740746855735779, -0.5770898461341858, -0.4597893953323364, -0.3182271420955658, -0.3103104829788208, -0.32622867822647095, -0.3242488503456116, -0.31667956709861755, -0.3476053774356842, -0.31001460552215576, -0.3363347351551056, -0.33099883794784546, -0.3194558322429657, -0.355131059885025, -0.36161133646965027, -0.32475364208221436, -0.3281310200691223, -0.3596455752849579, -0.31931939721107483, -0.3468552827835083, -0.34195294976234436, -0.3420727252960205, -0.3433576226234436, -0.3209373950958252, -0.31046122312545776, -0.3129536807537079, -0.3423405885696411, -0.26208269596099854, -0.283790647983551, -0.30067604780197144, -0.314946711063385, -0.32050061225891113, -0.3248846232891083, -0.32607752084732056, -0.3185686767101288, -0.313082218170166, -0.29819127917289734, -0.3124721646308899, -0.2901393175125122, -0.2827919125556946, -0.3584807515144348, -0.5600556135177612, -0.5775519609451294, -0.559845507144928, -0.5619506239891052, -0.5638207793235779, -0.562956690788269, -0.5465201735496521, -0.46155616641044617, -0.46768853068351746, -0.4707203805446625, -0.4835139513015747, -0.49003973603248596, -0.4666587710380554, -0.46244728565216064, -0.4651973843574524, -0.46304750442504883, -0.4646764397621155, -0.4631357789039612, -0.46610090136528015, -0.4652743339538574, -0.4655599892139435, -0.4645654559135437, -0.4643259346485138, -0.4652031362056732, -0.46381792426109314, -0.4677707552909851, -0.4817902445793152, -0.5538103580474854, -0.5733431577682495, -0.5736222863197327, -0.5762903094291687, -0.5738833546638489, -0.5732836127281189, -0.5746466517448425, -0.5737695693969727, -0.5734359622001648, -0.5727670192718506, -0.5753656625747681, -0.5746026635169983, -0.5686521530151367, -0.5693199634552002, -0.5459888577461243, -0.5008711218833923, -0.5323912501335144, -0.5874128341674805, -0.5724669694900513, -0.5735823512077332, -0.5695264339447021, -0.5409075617790222, -0.5539050698280334, -0.5733664631843567, -0.5331226587295532, -0.5600557327270508, -0.5625374913215637, -0.5629031658172607, -0.5614351630210876, -0.5606737732887268, -0.5653530359268188, -0.5638149976730347, -0.5636937022209167, -0.5676081776618958, -0.5682761669158936, -0.5663168430328369]

pandasPositions = pd.Series(positionsRaw)

#pandasPositions = pandasPositions.rolling(window=5).mean()

positions = pandasPositions.tolist()

positions[0],positions[1],positions[2],positions[3],positions[4],positions[5],positions[6],positions[7],positions[8] = positionsRaw[0],positionsRaw[1],positionsRaw[2],positionsRaw[3],positionsRaw[4],positionsRaw[5],positionsRaw[6],positionsRaw[7],positionsRaw[8]

print(positions)

for pos in positions:
    positions[positions.index(pos)] = section_y((pos+1)*720,9)

print(positions)

time = np.arange(len(positions))

# Calculate the change in position and change in time
delta_position = np.diff(positions)
delta_time = np.diff(time)

# Calculate velocity
velocityRaw = delta_position / delta_time
pandasVelocity = pd.Series(velocityRaw)

#velocity_moving_average = pandasVelocity.rolling(window=7).mean()
#velocity_moving_average = velocity_moving_average.tolist()
velocity_moving_average=pandasVelocity.tolist()

velocity_moving_average[0],velocity_moving_average[1],velocity_moving_average[2],velocity_moving_average[3],velocity_moving_average[4],velocity_moving_average[5],velocity_moving_average[6],velocity_moving_average[7],velocity_moving_average[8] = velocityRaw[0],velocityRaw[1],velocityRaw[2],velocityRaw[3],velocityRaw[4],velocityRaw[5],velocityRaw[6],velocityRaw[7],velocityRaw[8]

print(f'velocity_moving_average length: {len(velocity_moving_average)}')

time_velocity = ((time[:-1] + time[1:]) / 2)

left_wrist_velocities = np.column_stack((time_velocity,velocity_moving_average))
left_wrist_velocities = left_wrist_velocities
print(f'left_wrist_velocities type: {(len(left_wrist_velocities))}')
first_line_left = LineString(left_wrist_velocities)
pointfivevelocity = np.column_stack((np.arange(1, len(velocityRaw) -1 ),np.full_like(np.arange(1, len(velocityRaw) -1 ), 0.01, dtype=np.float64)))
pointfivevelocity = LineString(pointfivevelocity)
print(first_line_left)

intersection_left = first_line_left.intersection(pointfivevelocity)

left_stomach_intersections = []
if intersection_left.geom_type == 'MultiPoint':
    #plt.plot(*LineString(intersection_left.geoms).xy, 'o')
    left_stomach_intersections = sorted(((LineString(intersection_left.geoms).xy)[0]).tolist())
elif intersection_left.geom_type == 'Point':
    #plt.plot(*intersection_left.xy, 'o')
    left_stomach_intersections = [intersection_left.xy[0].tolist()[0]]

left_stomach_intersections = sorted(left_stomach_intersections)

#for i in left_stomach_intersections:
#    left_stomach_intersections[left_stomach_intersections.index(i)] = i*10/30.092253624249526

print(f'left_stomach_intersections: {left_stomach_intersections}')

peaks = []

print((left_stomach_intersections))
for x in range(0,len(left_stomach_intersections),2):
    print('hi')
    peaks.append((left_stomach_intersections[x]+left_stomach_intersections[x+1])/2)

print(f'peaks: {peaks}')

plt.figure(figsize=(8, 5))
print(len(positionsRaw))
print(len(time_velocity))   
plt.plot(positionsRaw,marker='x', linestyle='-',label='positionsRaw')
plt.plot(positions,marker='o', linestyle='--',label='positions')
plt.plot(time_velocity,velocity_moving_average,marker='*', linestyle='--')
plt.title('Velocity-Time Graph')
plt.xlabel('Time (s)')
plt.ylabel('Velocity (m/s)')
plt.legend()
plt.grid(True)
plt.show()